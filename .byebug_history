continue
num_beats
riffs
e.backtrace.shift
e.backtrace
e
continue
e
continue
time2
time1
continue
options
continue
riffs["2"]
num_beats
idx
continue
riffs[num_beats]
idx
num_beats
continue
                sleep 0.1 while !bloop.bloops.stopped?
                bloop.bloops.play
                bloop.bloops.tune(bloop.new_melody_sound, BloopApi.odd_melody_riff(min))
                bloop.bloops.tune(bloop.new_rhythm_sound, BloopApi.odd_rhythm_riff(min))
                bloop = BloopApi.new(tempo: tempo || 500)
              sequence.odd_time_sequence.each do |beats_count|
continue
                bloop.tune(bloop.new_melody_sound, BloopApi.odd_melody_riff(min))
                bloop.tune(bloop.new_rhythm_sound, BloopApi.odd_rhythm_riff(min))
                bloop = BloopApi.new(tempo: tempo || 500)
              sequence.odd_time_sequence.each do |beats_count|
continue
                bloop.tune(bloop.new_melody_sound, BloopApi.odd_melody_riff(min))
                bloop.tune(bloop.new_rhythm_sound, BloopApi.odd_rhythm_riff(min))
                bloop = BloopApi.new(tempo: tempo || 500)
              sequence.odd_time_sequence.each do |beats_count|
continue
                bloop.tune(new_melody_sound, BloopApi.odd_melody_riff(min))
                bloop.tune(new_rhythm_sound, BloopApi.odd_rhythm_riff(min))
                bloop = BloopApi.new(tempo: tempo || 500)
              sequence.odd_time_sequence.each do |beats_count|
continue
self
self.class
time_pairs.sample
continue
s1.class.instance_methods(false)
s1.class
s1.inspect
s1
